pipeline {
    agent {
        label 'sr613'
    }
    stages {
        stage('Prepare') {
            steps {
                script {
                    def labels = ['sr613']
                    def builders = [: ]
                    for (x in labels) {
                        def label = x
                        builders[label] = {
                            node(label) {
                                cleanWs()
                                checkout scm
                                sh 'cd Dockerfile-ubuntu18.04 && docker build -t aidk-pytorch110 . -f DockerfilePytorch110 && cd .. && yes | docker container prune && yes | docker image prune'
                            }
                        }
                    }
                    parallel builders
                }
            }
        }
        stage('Run transfer_learning_DDP_test') {
            agent {
                label 'sr613'
            }
            steps {
                sh 'docker run -t -d --name test-tlk-multinode-r1 --privileged --network host --device=/dev/dri -v /root/transfer_learning_logs:/home/vmagent/app/AIDK/TransferLearningKit/log -v /root/transfer_learning_model:/home/vmagent/app/AIDK/TransferLearningKit/model -v /root/transfer_learning_tensorboard_log:/home/vmagent/app/AIDK/TransferLearningKit/tensorboard_log -v /root/transfer_learning_pretrained:/home/vmagent/app/AIDK/TransferLearningKit/pretrained -v /mnt/DP_disk1/dataset:/home/vmagent/app/AIDK/TransferLearningKit/datasets -v `pwd`:/home/vmagent/app -w /home/vmagent/app/AIDK/TransferLearningKit/src aidk-pytorch110 /opt/intel/oneapi/intelpython/latest/envs/pytorch-1.10.0/bin/python main.py -s2 -r1'
                sh 'docker run --rm --name test-tlk-multinode-r0 --privileged --network host --device=/dev/dri -v /root/transfer_learning_logs:/home/vmagent/app/AIDK/TransferLearningKit/log -v /root/transfer_learning_model:/home/vmagent/app/AIDK/TransferLearningKit/model -v /root/transfer_learning_tensorboard_log:/home/vmagent/app/AIDK/TransferLearningKit/tensorboard_log -v /root/transfer_learning_pretrained:/home/vmagent/app/AIDK/TransferLearningKit/pretrained -v /mnt/DP_disk1/dataset:/home/vmagent/app/AIDK/TransferLearningKit/datasets -v `pwd`:/home/vmagent/app -w /home/vmagent/app/AIDK/TransferLearningKit/src aidk-pytorch110 /opt/intel/oneapi/intelpython/latest/envs/pytorch-1.10.0/bin/python main.py -s2 -r0'
            }
        }
        stage('Run transfer_learning_test') {
            agent {
                label 'sr613'
            }
            steps {
                sh 'docker run --rm --name test-tlk-singlenode --privileged --network host --device=/dev/dri --shm-size="2g" -v /root/cicd_logs:/home/vmagent/app/cicd_logs -v /root/transfer_learning_logs:/home/vmagent/app/AIDK/TransferLearningKit/log -v /root/transfer_learning_model:/home/vmagent/app/AIDK/TransferLearningKit/model -v /root/transfer_learning_tensorboard_log:/home/vmagent/app/AIDK/TransferLearningKit/tensorboard_log -v /root/transfer_learning_pretrained:/home/vmagent/app/AIDK/TransferLearningKit/pretrained -v /mnt/DP_disk1/dataset:/home/vmagent/app/AIDK/TransferLearningKit/datasets -v `pwd`:/home/vmagent/app -w /home/vmagent/app/test/cicd aidk-pytorch110 /bin/bash -c ". /home/vmagent/app/tests/cicd/jenkins_transfer_learning_test.sh"'   
            }
        }
    }
    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir()
            sh 'if [[ $(docker ps -a -q --filter "name=test-tlk-*" | wc -l) -ne 0 ]]; then docker ps -a -q --filter "name=test-tlk-*" | grep -q . && docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q); fi'
        }
        success {
            echo 'I succeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}